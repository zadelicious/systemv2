
import java.awt.HeadlessException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.*;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author Jesse Rine Romero
 */
public class ManageUser extends javax.swing.JFrame {

    /**
     * Creates new form ManageUser
     */
    private String currentUserName;
    private String currentUserRole;

    public ManageUser() {
        initComponents();
        setLocationRelativeTo(null);
        refresh();

        DefaultTableModel model = (DefaultTableModel) mngtable.getModel();
        mngtable.setModel(new DefaultTableModel(model.getDataVector(), getColumnNames(model)) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;  // Disable editing for all cells
            }
        });
    }
    

    private Vector<String> getColumnNames(DefaultTableModel model) {
        Vector<String> columnNames = new Vector<>();
        for (int i = 0; i < model.getColumnCount(); i++) {
            columnNames.add(model.getColumnName(i));
        }
        return columnNames;
    }

    private void refresh() {
        DefaultTableModel model = (DefaultTableModel) mngtable.getModel();
        model.setRowCount(0);

        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/inventorymanagement", "root", "");
            String query = "SELECT * FROM inventorymanagementsystem";
            ps = con.prepareStatement(query);
            rs = ps.executeQuery();

            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getString("appuser_pk"),
                    rs.getString("username"),
                    rs.getString("name"),
                    rs.getString("mobilenumber"),
                    rs.getString("address"),
                    rs.getString("status")
                });
            }
        } catch (ClassNotFoundException | SQLException e) {
            JOptionPane.showMessageDialog(null, "Error fetching data: " + e.getMessage());
        }
    }

    public ManageUser(String role, String names) {
        this.currentUserRole = role;
        this.currentUserName = names;
        initComponents();
        setLocationRelativeTo(null);
        currentUserRole = role;  // You can use this role to manage access, if needed
        refresh();  // Refresh the data when the form is initialized
    }

    Connection con;
    PreparedStatement ps;
    ResultSet rs;

    private boolean validateFields() {
        if (this.equals("edit") && !mngrole.getText().equals("") && !mngnumber.getText().equals("") && !mngusername.getText().equals("") && !mngaddress.getText().equals("")) {
            return false;
        } else if (this.equals("new") && !mngrole.getText().equals("") && !mngnumber.getText().equals("") && !mngusername.getText().equals("") && !mngaddress.getText().equals("") && !mngpassword.getText().equals("")) {
            return true;
        } else {
            return false;

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void formComponentShown(java.awt.event.ComponentEvent evt) {
        DefaultTableModel model = (DefaultTableModel) mngtable.getModel();
        try {
            // Mysql Connector
            Class.forName("com.mysql.cj.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/inventorymanagement", "root", "");
            ps = con.prepareStatement("Select * from customer");
            rs = ps.executeQuery();

            // Adding rows to the table
            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getString("appuser_pk"),
                    rs.getString("name"),
                    rs.getString("mobilenumber"),
                    rs.getString("email"),
                    rs.getString("address"),
                    rs.getString("status")
                });
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }

        // Disable the Update button initially
    }
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        mngtable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        mngrole = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        mngusername = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        mngname = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        mngnumber = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        mngaddress = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        mngpassword = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        mngstatus = new javax.swing.JComboBox<>();
        btnsave = new javax.swing.JButton();
        btnupdate = new javax.swing.JButton();
        btndelete = new javax.swing.JButton();
        btnclose = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        searchbar = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(163, 198, 134));
        jPanel1.setForeground(new java.awt.Color(29, 29, 29));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel6.setBackground(new java.awt.Color(163, 198, 134));
        jPanel1.add(jPanel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 930, -1));

        mngtable.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        mngtable.setForeground(new java.awt.Color(41, 88, 82));
        mngtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Username", "Name", "Mobile No.", "Address", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        mngtable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mngtableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(mngtable);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 80, 470, 416));

        jLabel2.setFont(new java.awt.Font("Javanese Text", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(242, 242, 242));
        jLabel2.setText("USERROLE:");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 60, -1, -1));

        mngrole.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(41, 88, 82), 2, true));
        mngrole.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mngroleActionPerformed(evt);
            }
        });
        mngrole.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                mngroleKeyTyped(evt);
            }
        });
        jPanel1.add(mngrole, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 80, 400, 30));

        jLabel4.setFont(new java.awt.Font("Javanese Text", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(242, 242, 242));
        jLabel4.setText("USERNAME:");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 120, 100, 20));

        mngusername.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(41, 88, 82), 2, true));
        mngusername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mngusernameActionPerformed(evt);
            }
        });
        mngusername.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                mngusernameKeyTyped(evt);
            }
        });
        jPanel1.add(mngusername, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 140, 400, 30));

        jLabel8.setFont(new java.awt.Font("Javanese Text", 1, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(242, 242, 242));
        jLabel8.setText("NAME:");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 180, 70, 20));

        mngname.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(41, 88, 82), 2, true));
        mngname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mngnameActionPerformed(evt);
            }
        });
        mngname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                mngnameKeyTyped(evt);
            }
        });
        jPanel1.add(mngname, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 200, 400, 30));

        jLabel3.setFont(new java.awt.Font("Javanese Text", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(242, 242, 242));
        jLabel3.setText("MOBILE NUMBER:");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 240, 130, 20));

        mngnumber.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(41, 88, 82), 2, true));
        mngnumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mngnumberActionPerformed(evt);
            }
        });
        mngnumber.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                mngnumberKeyTyped(evt);
            }
        });
        jPanel1.add(mngnumber, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 260, 400, 30));

        jLabel5.setFont(new java.awt.Font("Javanese Text", 1, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(242, 242, 242));
        jLabel5.setText("ADDRESS:");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 300, 100, 20));

        mngaddress.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(41, 88, 82), 2, true));
        mngaddress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mngaddressActionPerformed(evt);
            }
        });
        mngaddress.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                mngaddressKeyTyped(evt);
            }
        });
        jPanel1.add(mngaddress, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 320, 400, 30));

        jLabel7.setFont(new java.awt.Font("Javanese Text", 1, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(242, 242, 242));
        jLabel7.setText("PASSWORD:");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 360, 120, 20));

        mngpassword.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(41, 88, 82), 2, true));
        mngpassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mngpasswordActionPerformed(evt);
            }
        });
        mngpassword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                mngpasswordKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                mngpasswordKeyTyped(evt);
            }
        });
        jPanel1.add(mngpassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 380, 400, 30));

        jLabel6.setFont(new java.awt.Font("Javanese Text", 1, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(242, 242, 242));
        jLabel6.setText("STATUS:");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 420, 90, 20));

        mngstatus.setBackground(new java.awt.Color(242, 242, 242));
        mngstatus.setEditable(true);
        mngstatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Active", "Inactive" }));
        mngstatus.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(41, 88, 82), 2, true));
        mngstatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mngstatusActionPerformed(evt);
            }
        });
        jPanel1.add(mngstatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 440, 400, 20));

        btnsave.setBackground(new java.awt.Color(0, 29, 29));
        btnsave.setFont(new java.awt.Font("Impact", 0, 14)); // NOI18N
        btnsave.setForeground(new java.awt.Color(242, 242, 242));
        btnsave.setText("SAVE");
        btnsave.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 0));
        btnsave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnsaveActionPerformed(evt);
            }
        });
        jPanel1.add(btnsave, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 470, 70, 30));

        btnupdate.setBackground(new java.awt.Color(0, 29, 29));
        btnupdate.setFont(new java.awt.Font("Impact", 0, 14)); // NOI18N
        btnupdate.setForeground(new java.awt.Color(242, 242, 242));
        btnupdate.setText("UPDATE");
        btnupdate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 0));
        btnupdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnupdateActionPerformed(evt);
            }
        });
        jPanel1.add(btnupdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 470, 70, 30));

        btndelete.setBackground(new java.awt.Color(0, 29, 29));
        btndelete.setFont(new java.awt.Font("Impact", 0, 14)); // NOI18N
        btndelete.setForeground(new java.awt.Color(242, 242, 242));
        btndelete.setText("DELETE");
        btndelete.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 0));
        btndelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btndeleteActionPerformed(evt);
            }
        });
        jPanel1.add(btndelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 470, 70, 30));

        btnclose.setBackground(new java.awt.Color(0, 29, 29));
        btnclose.setFont(new java.awt.Font("Impact", 0, 14)); // NOI18N
        btnclose.setForeground(new java.awt.Color(242, 242, 242));
        btnclose.setText("CLOSE");
        btnclose.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 0));
        btnclose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncloseActionPerformed(evt);
            }
        });
        jPanel1.add(btnclose, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 470, 70, 30));

        jPanel2.setBackground(new java.awt.Color(41, 88, 82));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Impact", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(242, 242, 242));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("MANAGE USER:");
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 10, 470, 50));

        searchbar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(41, 88, 82), 2, true));
        searchbar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchbarActionPerformed(evt);
            }
        });
        searchbar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchbarKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                searchbarKeyTyped(evt);
            }
        });
        jPanel2.add(searchbar, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 20, 360, 30));

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGES/magnifying-glass.png"))); // NOI18N
        jPanel2.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 30, 30));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 930, 60));

        jPanel3.setBackground(new java.awt.Color(41, 88, 82));
        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 520));

        jPanel4.setBackground(new java.awt.Color(41, 88, 82));
        jPanel1.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 0, 10, 520));

        jPanel5.setBackground(new java.awt.Color(41, 88, 82));
        jPanel1.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 510, 950, 10));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 950, 520));

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGES/MO.png"))); // NOI18N
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 950, 520));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mngroleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mngroleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mngroleActionPerformed

    private void mngpasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mngpasswordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mngpasswordActionPerformed

    private void btnupdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnupdateActionPerformed
        try {
            // Validate the user role
            String username = mngusername.getText();
            if (username.length() < 8) {
        JOptionPane.showMessageDialog(this, "Username must have at least 8 characters.", "Validation Error", JOptionPane.ERROR_MESSAGE);
        return;  // Stop execution
    }
            String role = mngrole.getText();
            if (role == null || role.trim().isEmpty()) {
                JOptionPane.showMessageDialog(null, "User role is required.");
                return;
            }

            // Check if the role is one of the allowed values
            if (!role.equalsIgnoreCase("staff") && !role.equalsIgnoreCase("admin") && !role.equalsIgnoreCase("auditor")) {
                JOptionPane.showMessageDialog(null, "User role must be one of the following: staff, admin, auditor.");
                return;
            }

            int selectedRow = mngtable.getSelectedRow();
            if (selectedRow == -1) {
                JOptionPane.showMessageDialog(null, "Please select a user to update.");
                return;
            }

            // Get the ID of the selected user
            String userId = mngtable.getValueAt(selectedRow, 0).toString();

            // Get updated fields
            
            String name = mngname.getText();
            String mobile = mngnumber.getText();
            String address = mngaddress.getText();
            String password = mngpassword.getText();
            String status = mngstatus.getSelectedItem().toString();

            // Validate fields
            if (validateFields()) {
                JOptionPane.showMessageDialog(null, "All fields are required.");
                return;
            }

            if (!isValidPassword(password)) {
                JOptionPane.showMessageDialog(null, "Password must be at least 8 characters, contain at least one capital letter and one number.");
                return;
            }

            // Hash the password
            String hashedPassword = PasswordHashing.hashPassword(password);

            // Check for changes in the database
            ps = con.prepareStatement("SELECT * FROM inventorymanagementsystem WHERE appuser_pk = ?");
            ps.setString(1, userId);
            rs = ps.executeQuery();

            if (rs.next()) {
                // Get current database values
                String dbRole = rs.getString("userrole");
                String dbUsername = rs.getString("username");
                String dbName = rs.getString("name");
                String dbMobile = rs.getString("mobilenumber");
                String dbPassword = rs.getString("password");
                String dbAddress = rs.getString("address");
                String dbStatus = rs.getString("status");

                // Check if there are changes
                if (dbRole.equals(role) && dbUsername.equals(username) && dbName.equals(name) && dbMobile.equals(mobile)
                        && dbPassword.equals(hashedPassword) && dbAddress.equals(address) && dbStatus.equals(status)) {
                    JOptionPane.showMessageDialog(null, "No changes detected. Please modify at least one field to update.");
                    return;
                }
            }

            // Update query
            ps = con.prepareStatement(
                    "UPDATE inventorymanagementsystem SET userrole = ?, username = ?, name = ?, mobilenumber = ?, password = ?, original_password = ?, address = ?, status = ? WHERE appuser_pk = ?"
            );

            ps.setString(1, role);
            ps.setString(2, username);
            ps.setString(3, name);
            ps.setString(4, mobile);
            ps.setString(5, hashedPassword); // Update hashed password
            ps.setString(6, password);       // Update original password
            ps.setString(7, address);
            ps.setString(8, status);
            ps.setString(9, userId);

            int rowsUpdated = ps.executeUpdate();
            if (rowsUpdated > 0) {
                JOptionPane.showMessageDialog(null, "User updated successfully!");

                // Update the table row with new values
                mngtable.setValueAt(username, selectedRow, 1);
                mngtable.setValueAt(name, selectedRow, 2);
                mngtable.setValueAt(mobile, selectedRow, 3);
                mngtable.setValueAt(address, selectedRow, 4);
                mngtable.setValueAt(status, selectedRow, 5);

                // Clear fields after successful update
                clearFields();
            } else {
                JOptionPane.showMessageDialog(null, "User update failed.");
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
        }
    }//GEN-LAST:event_btnupdateActionPerformed

    private void clearFields() {
        mngusername.setText("");
        mngname.setText("");
        mngnumber.setText("");
        mngaddress.setText("");
        mngpassword.setText("");
        mngrole.setText("");
        mngstatus.setSelectedIndex(0); // Reset dropdown to the first option
    }
    private void btnsaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnsaveActionPerformed
        String password = mngpassword.getText();
        String username = mngusername.getText();
        
        if (username.length() < 8) {
        JOptionPane.showMessageDialog(this, "Username must have at least 8 characters.", "Validation Error", JOptionPane.ERROR_MESSAGE);
        return;  // Stop execution
    }
// Check if the password meets the required conditions
        if (!isValidPassword(password)) {
            JOptionPane.showMessageDialog(null, "Password must be at least 8 characters, contain at least one capital letter and one number.");
            return;
        }

// Validate the user role
        String role = mngrole.getText();
        if (role == null || role.trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "User role is required.");
            return;
        }

// Check if the role is one of the allowed values
        if (!role.equalsIgnoreCase("staff") && !role.equalsIgnoreCase("admin") && !role.equalsIgnoreCase("auditor")) {
            JOptionPane.showMessageDialog(null, "User role must be one of the following: staff, admin, auditor.");
            return;
        }

// Validate other fields
        if (validateFields()) {
            JOptionPane.showMessageDialog(null, "All fields are required.");
            return;
        } else {
            try {
               
                String mobile = mngnumber.getText();

                // Validate username and mobile number
                if (username.matches("\\d+")) {
                    JOptionPane.showMessageDialog(null, "Username must have at least 8 characters.");
                    return;
                }

                if (!mobile.matches("\\d+")) {
                    JOptionPane.showMessageDialog(null, "Enter a valid phone number.");
                    return;
                }

                if (mobile.length() < 8) {
                    JOptionPane.showMessageDialog(null, "Number must have at least 8 digits.");
                    return;
                }

                // Check if username already exists in the database
                Class.forName("com.mysql.cj.jdbc.Driver");
                con = DriverManager.getConnection("jdbc:mysql://localhost:3306/inventorymanagement", "root", "");

                String checkUsernameQuery = "SELECT COUNT(*) FROM inventorymanagementsystem WHERE username = ?";
                ps = con.prepareStatement(checkUsernameQuery);
                ps.setString(1, username);
                rs = ps.executeQuery();

                if (rs.next() && rs.getInt(1) > 0) {
                    JOptionPane.showMessageDialog(null, "Username already taken.");
                    return;
                }

                // Hash the password
                String hashedPassword = PasswordHashing.hashPassword(password);

                // Insert into the database
                ps = con.prepareStatement(
                        "INSERT INTO inventorymanagementsystem (userrole, username, name, mobilenumber, password, original_password, address, status) VALUES(?,?,?,?,?,?,?,?)",
                        Statement.RETURN_GENERATED_KEYS
                );

                ps.setString(1, role); // Use the validated user role
                ps.setString(2, username);
                ps.setString(3, mngname.getText());
                ps.setString(4, mobile);
                ps.setString(5, hashedPassword); // Store hashed password
                ps.setString(6, password);       // Store original password
                ps.setString(7, mngaddress.getText());
                ps.setString(8, mngstatus.getSelectedItem().toString());

                ps.executeUpdate();
                JOptionPane.showMessageDialog(null, "User added successfully.");

                // Add the new user to the table
                rs = ps.getGeneratedKeys();
                if (rs.next()) {
                    DefaultTableModel model = (DefaultTableModel) mngtable.getModel();
                    model.addRow(new Object[]{
                        rs.getInt(1), // Auto-generated ID
                        username,
                        mngname.getText(),
                        mobile,
                        mngaddress.getText(),
                        mngstatus.getSelectedItem().toString()
                    });
                }

                // Clear fields after successful save
                clearFields();

            } catch (HeadlessException | ClassNotFoundException | SQLException e) {
                JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
            }
        }
    }//GEN-LAST:event_btnsaveActionPerformed

    private void btncloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncloseActionPerformed
        // TODO add your handling code here:
        int a = JOptionPane.showConfirmDialog(null, "Do you want to close the app?", "Select", JOptionPane.YES_NO_OPTION);
        if (a == 0) {
            this.dispose();
            if (currentUserRole != null) {
                new Home(currentUserRole, currentUserName).setVisible(true);
            } else {
// Handle the case where currentUserRole is null (e.g., show an error message)
                JOptionPane.showMessageDialog(this, "Error: User  role is not defined.");
            }
        }
    }//GEN-LAST:event_btncloseActionPerformed

    private void mngnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mngnameActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_mngnameActionPerformed

    private void btndeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btndeleteActionPerformed
        /*DefaultTableModel model = (DefaultTableModel) mngtable.getModel();
        model.setRowCount(0);
        
        try {
        Class.forName("com.mysql.cj.jdbc.Driver");
        con = DriverManager.getConnection("jdbc:mysql://localhost:3306/inventorymanagement", "root", "");
        String query = "SELECT * FROM inventorymanagementsystem";
        ps = con.prepareStatement(query);
        rs = ps.executeQuery();
        
        while (rs.next()) {
        model.addRow(new Object[]{
        rs.getString("appuser_pk"),
        rs.getString("username"),
        rs.getString("name"),
        rs.getString("mobilenumber"),
        rs.getString("address"),
        rs.getString("status")
        });
        }
        } catch (ClassNotFoundException | SQLException e) {
        JOptionPane.showMessageDialog(null, "Error fetching data: " + e.getMessage());
        }*/

        int selectedRow = mngtable.getSelectedRow(); // Get the selected row index
        if (selectedRow == -1) {
            // No row is selected
            JOptionPane.showMessageDialog(this, "Please select a user to delete.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Confirm deletion
        int confirmation = JOptionPane.showConfirmDialog(this,
                "Are you sure you want to delete the selected user?",
                "Delete Confirmation", JOptionPane.YES_NO_OPTION);

        if (confirmation == JOptionPane.YES_OPTION) {
            try {
                // Get the user ID from the selected row (assuming ID is in the first column)
                String userId = mngtable.getValueAt(selectedRow, 0).toString();

                // Connect to the database
                Class.forName("com.mysql.cj.jdbc.Driver");
                Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/inventorymanagement", "root", "");

                // Execute DELETE SQL query
                String deleteQuery = "DELETE FROM inventorymanagementsystem WHERE appuser_pk = ?";
                PreparedStatement ps = con.prepareStatement(deleteQuery);
                ps.setString(1, userId);
                int rowsDeleted = ps.executeUpdate();

                if (rowsDeleted > 0) {
                    // Success: Refresh the table to show updated data
                    JOptionPane.showMessageDialog(this, "User deleted successfully.");
                    refresh(); // Call your existing refresh method to reload the data
                } else {
                    JOptionPane.showMessageDialog(this, "Failed to delete user.", "Error", JOptionPane.ERROR_MESSAGE);
                }

                ps.close();
                con.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error deleting user: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }

    }//GEN-LAST:event_btndeleteActionPerformed

    private void mngstatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mngstatusActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mngstatusActionPerformed

    private void mngtableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mngtableMouseClicked
        if (evt.getClickCount() == 1) { // Single click
            int selectedRow = mngtable.getSelectedRow();
            if (selectedRow != -1) {
                // Get data from the selected row
                String id = mngtable.getValueAt(selectedRow, 0).toString();
                String username = mngtable.getValueAt(selectedRow, 1).toString();
                String name = mngtable.getValueAt(selectedRow, 2).toString();
                String mobile = mngtable.getValueAt(selectedRow, 3).toString();
                String address = mngtable.getValueAt(selectedRow, 4).toString();
                String status = mngtable.getValueAt(selectedRow, 5).toString();

                // Retrieve password and role from the database
                try {
                    Class.forName("com.mysql.cj.jdbc.Driver");
                    con = DriverManager.getConnection("jdbc:mysql://localhost:3306/inventorymanagement", "root", "");

                    // Query to fetch original password and role based on ID
                    String query = "SELECT original_password, userrole FROM inventorymanagementsystem WHERE appuser_pk = ?";
                    ps = con.prepareStatement(query);
                    ps.setString(1, id);
                    rs = ps.executeQuery();

                    if (rs.next()) {
                        String originalPassword = rs.getString("original_password"); // Get original password
                        String role = rs.getString("userrole");

                        // Set the retrieved values to the fields
                        mngpassword.setText(originalPassword); // Set the original password
                        mngrole.setText(role);
                    }
                } catch (ClassNotFoundException | SQLException e) {
                    JOptionPane.showMessageDialog(null, "Error fetching user details: " + e.getMessage());
                }

                // Set data to the text fields
                mngname.setText(name);
                mngnumber.setText(mobile);
                mngaddress.setText(address);
                mngusername.setText(username);
                mngstatus.setSelectedItem(status);

                // Enable the Update button if required
            }
        }
    }//GEN-LAST:event_mngtableMouseClicked

    private void mngnumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mngnumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mngnumberActionPerformed

    private void mngnumberKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_mngnumberKeyTyped
        // TODO add your handling code here:
        String currentText = mngnumber.getText();
        char c = evt.getKeyChar();

        if (!Character.isDigit(c)) {
            evt.consume();
        }

        if (currentText.length() == 0 && c != '0') {
            evt.consume();
            return;
        }
        if (currentText.length() == 1 && currentText.charAt(0) == '0' && c != '9') {
            evt.consume();
            return;
        }
        if (currentText.length() >= 11) {
            evt.consume();
        }
    }//GEN-LAST:event_mngnumberKeyTyped

    private void mngnameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_mngnameKeyTyped
        // TODO add your handling code here:
        if (mngname.getText().length() >= 30) {
            evt.consume();
            return;
        }
        char c = evt.getKeyChar();
        /*//can't type letter
        if (!Character.isDigit(c)) {
        evt.consume();
        }*/

        // can't type number
        if (Character.isDigit(c)) {
            evt.consume();
        }
        //can't type symbol
        if (!Character.isLetter(c) && c != ' ') {
            evt.consume();  // Block everything except letters and spaces
        }
    }//GEN-LAST:event_mngnameKeyTyped

    private void mngpasswordKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_mngpasswordKeyTyped
        // TODO add your handling code here:
        if (mngpassword.getText().length() >= 15) {
            evt.consume();
            return;
        }

    }//GEN-LAST:event_mngpasswordKeyTyped

    private void mngpasswordKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_mngpasswordKeyReleased
        // TODO add your handling code here:

    }//GEN-LAST:event_mngpasswordKeyReleased

    private void mngaddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mngaddressActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mngaddressActionPerformed

    private void mngusernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mngusernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mngusernameActionPerformed

    private void searchbarKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchbarKeyTyped
        // TODO add your handling code here:
        if (searchbar.getText().length() >= 30) {
            evt.consume();
            return;
        }
        try {
            // Mysql Connector
            Class.forName("com.mysql.cj.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/inventorymanagement", "root", "");
            String query = "SELECT appuser_pk, username, name, mobilenumber, address, status FROM inventorymanagementsystem WHERE appuser_pk LIKE ? OR username LIKE ? OR name LIKE ? OR mobilenumber LIKE ? "
                    + " OR address LIKE ? OR status LIKE ?";

            ps = con.prepareStatement(query);
            String searchText = "%" + searchbar.getText() + "%";

            ps.setString(1, searchText);
            ps.setString(2, searchText);
            ps.setString(3, searchText);
            ps.setString(4, searchText);
            ps.setString(5, searchText);
            ps.setString(6, searchText);

            rs = ps.executeQuery();
            DefaultTableModel dt = (DefaultTableModel) mngtable.getModel();
            dt.setRowCount(0);

            while (rs.next()) {
                dt.addRow(new Object[]{
                    rs.getString(1),
                    rs.getString(2),
                    rs.getString(3),
                    rs.getString(4),
                    rs.getString(5),
                    rs.getString(6)
                });
            }

        } catch (SQLException ex) {
            Logger.getLogger(ManageUser.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ManageUser.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_searchbarKeyTyped

    private void searchbarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchbarActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) mngtable.getModel();
        model.setRowCount(0);

        String selectedUser = (String) mngstatus.getSelectedItem();

        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/inventorymanagement", "root", "");

            // Query to fetch products based on the selected category
            String query;
            if ("All".equals(selectedUser)) {
                query = "SELECT * FROM inventorymanagementsystem";
                ps = con.prepareStatement(query);
            } else {
                query = "SELECT * FROM inventorymanagementsystem WHERE status = ?";
                ps = con.prepareStatement(query);
                ps.setString(1, selectedUser);
            }
            ResultSet rs = ps.executeQuery();

            // Loop through the result set and add each product to the table
            while (rs.next()) {
                String id = rs.getString("appuser_pk");
                String usernamed = rs.getString("username");
                String named = rs.getString("name");
                String number = rs.getString("mobilenumber");
                String address = rs.getString("address");
                String status = rs.getString("status");

                // Add row to the table
                model.addRow(new Object[]{id, usernamed, named, number, address, status});
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Failed to search products: " + e.getMessage());
        }
    }//GEN-LAST:event_searchbarActionPerformed

    private void mngroleKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_mngroleKeyTyped
        // TODO add your handling code here:
        
        if (mngrole.getText().length() >= 10) {
            evt.consume();
            return;
        }
        char c = evt.getKeyChar();
        /*//can't type letter
        if (!Character.isDigit(c)) {
        evt.consume();
        }*/

        // can't type number
        if (Character.isDigit(c)) {
            evt.consume();
        }
        //can't type symbol
        if (!Character.isLetter(c) && c != ' ') {
            evt.consume();  // Block everything except letters and spaces
        }
    }//GEN-LAST:event_mngroleKeyTyped

    private void mngusernameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_mngusernameKeyTyped
        // TODO add your handling code here:
        if (mngusername.getText().length() >= 30) {
            evt.consume();
            return;
        }
    }//GEN-LAST:event_mngusernameKeyTyped

    private void mngaddressKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_mngaddressKeyTyped
        // TODO add your handling code here:
        if (mngaddress.getText().length() >= 50) {
            evt.consume();
            return;
        }
    }//GEN-LAST:event_mngaddressKeyTyped

    private void searchbarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchbarKeyReleased
        // TODO add your handling code here:
        if (searchbar.getText().length() >= 30) {
            evt.consume();
            return;
        }
        try {
            // Mysql Connector
            Class.forName("com.mysql.cj.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/inventorymanagement", "root", "");
            String query = "SELECT appuser_pk, username, name, mobilenumber, address, status FROM inventorymanagementsystem WHERE appuser_pk LIKE ? OR username LIKE ? OR name LIKE ? OR mobilenumber LIKE ? "
                    + " OR address LIKE ? OR status LIKE ?";

            ps = con.prepareStatement(query);
            String searchText = "%" + searchbar.getText() + "%";

            ps.setString(1, searchText);
            ps.setString(2, searchText);
            ps.setString(3, searchText);
            ps.setString(4, searchText);
            ps.setString(5, searchText);
            ps.setString(6, searchText);

            rs = ps.executeQuery();
            DefaultTableModel dt = (DefaultTableModel) mngtable.getModel();
            dt.setRowCount(0);

            while (rs.next()) {
                dt.addRow(new Object[]{
                    rs.getString(1),
                    rs.getString(2),
                    rs.getString(3),
                    rs.getString(4),
                    rs.getString(5),
                    rs.getString(6)
                });
            }

        } catch (SQLException ex) {
            Logger.getLogger(ManageUser.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ManageUser.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_searchbarKeyReleased

    private boolean isValidPassword(String password) {
        // Regular expression to check password strength:
        // - At least 8 characters.
        // - At least one uppercase letter.
        // - At least one digit.
        String regex = "^(?=.*[A-Z])(?=.*\\d).{8,}$";

        return password.matches(regex);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManageUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManageUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManageUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManageUser().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnclose;
    private javax.swing.JButton btndelete;
    private javax.swing.JButton btnsave;
    private javax.swing.JButton btnupdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField mngaddress;
    public javax.swing.JTextField mngname;
    private javax.swing.JTextField mngnumber;
    private javax.swing.JTextField mngpassword;
    private javax.swing.JTextField mngrole;
    private javax.swing.JComboBox<String> mngstatus;
    private javax.swing.JTable mngtable;
    private javax.swing.JTextField mngusername;
    private javax.swing.JTextField searchbar;
    // End of variables declaration//GEN-END:variables

}
